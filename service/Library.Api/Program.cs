using Microsoft.OpenApi.Models;
using Library.Infrastructure;
using Library.Application;
using System.Reflection;
using Library.Api.CustomAuth;

var builder = WebApplication.CreateBuilder(args);

// Inject Infrastructure
builder.Services.AddInfrastuctureService(builder.Configuration);

// Set the API key for authorization
var apiKey = builder.Configuration.GetValue<string>("AppSettings:JWTSecret");
if (apiKey != null)
    AuthorizeAttribute.SetApiKey(apiKey); // Store API Key

// Inject Application
builder.Services.AddApplicationService();

// Add Controllers
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Library API",
        Version = "v1",
        Description = "A simple API for managing a library system."
    });

    // Locate the XML file being generated by ASP.NET Core
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath);  // Include the XML comments in Swagger

        // Configure API key authentication in Swagger
    c.AddSecurityDefinition("ApiKey", new OpenApiSecurityScheme
    {
        Name = "X-Api-Token",  // The name of the header
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Description = "API token needed to access the endpoints"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "ApiKey" } }, new string[] { } }
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseCors(x => x.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());
app.UseMiddleware<JwtMiddleware>();
app.MapControllers();

// Test the database connection
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    try
    {
        // Perform a simple query to test the connection
        if (await dbContext.Database.CanConnectAsync())
        {
            Console.WriteLine("Database connection is successful.");
        }
        else
        {
            Console.WriteLine("Database connection failed.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred while testing the database connection: {ex.Message}");
    }
}

app.Run();
